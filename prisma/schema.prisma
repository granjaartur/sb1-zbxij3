generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum PaymentFrequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  MB
  MBWAY
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Member {
  id            String        @id @default(uuid())
  name          String
  email         String?
  documentId    String?       @unique
  taxId         String?       @unique
  gender        Gender?
  maritalStatus MaritalStatus?
  birthDate     DateTime?
  phone         String?
  mobile        String?
  address       String?
  profession    String?
  academicDegree String?
  school        String?
  fieldOfStudy  String?
  training      String?
  observations  String?
  groups        MemberGroup[]
  payments      Payment[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Group {
  id          String        @id @default(uuid())
  name        String
  description String?
  members     MemberGroup[]
  services    Service[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model MemberGroup {
  id        String   @id @default(uuid())
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberId, groupId])
}

model ServiceCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  services    Service[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Service {
  id          String          @id @default(uuid())
  name        String
  description String?
  basePrice   Float
  taxPercent  Float
  frequency   PaymentFrequency
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  group       Group?          @relation(fields: [groupId], references: [id])
  groupId     String?
  payments    Payment[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  member        Member        @relation(fields: [memberId], references: [id])
  memberId      String
  service       Service       @relation(fields: [serviceId], references: [id])
  serviceId     String
  amount        Float
  status        PaymentStatus @default(PENDING)
  dueDate       DateTime
  paidDate      DateTime?
  transactions  PaymentTransaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model PaymentTransaction {
  id            String        @id @default(uuid())
  payment       Payment       @relation(fields: [paymentId], references: [id])
  paymentId     String
  method        PaymentMethod
  reference     String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  sourcePhone   String?
  completedAt   DateTime?
  errorMessage  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}